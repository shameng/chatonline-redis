<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>

    <!--与web.xml文件里的shiroFilter过滤器里的targetBeanName相对应-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"></property>
        <!--登陆页面地址，必须设置，否则默认是/login.jsp-->
        <property name="loginUrl" value="/login"></property>
        <!--没有权限跳转到的页面，本系统使用了MyExceptionResolver类来处理无权限异常-->
        <!--<property name="unauthorizedUrl" value="/refuse"></property>-->
        <property name="filters">
            <map>
                <entry key="authc" value-ref="authenticationFilter"></entry>
                <entry key="logout" value-ref="logoutFilter"></entry>
                <entry key="ssl" value-ref="sslFilter"></entry>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"></entry>
                <entry key="captcha" value-ref="captchaValidationFilter"></entry>
                <entry key="forceLogout" value-ref="forceLogoutFilter"></entry>
            </map>
        </property>
        <!-- 过滤器链定义，从上向下顺序执行，一般将/**放在最下边 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- 对静态资源设置匿名访问 -->
                /images/** = anon
                /js/** = anon
                /styles/** = anon
                <!--注册用户可匿名访问-->
                /register/** = anon
                <!--登陆地址采用SSL，即HTTPS协议，？此时还必须加上authc，否则不执行登录验证-->
                <!--/login = ssl,authc-->
                <!--注意：验证码要可匿名访问-->
                /captcha* = anon
                <!--OAuth可匿名访问-->
                /oauth2/* = anon
                /login = captcha,authc
                <!-- 请求 /logout 地址，shiro去清除session-->
                /logout = logout
                <!--测试 user-->
                /user.jsp = user
                <!--/** = authc 所有url都必须认证通过才可以访问-->
                /** = forceLogout,kickout,authc
            </value>
        </property>
    </bean>

    <!-- securityManager安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="realm"></property>
        <property name="cacheManager" ref="shiroCacheManager"></property>
        <property name="sessionManager" ref="shiroSessionManager"></property>
        <property name="rememberMeManager" ref="cookieRememberMeManager"></property>
    </bean>

    <!--自定义Realm-->
    <bean id="realm" class="com.meng.chatonline.security.MyRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"></property>
        <!--设置Realm的名字-->
        <property name="name" value="myRealm"></property>
        <property name="authorizationCacheName" value="authorizationCache"></property>
    </bean>

    <!--凭证匹配器-->
    <bean id="credentialsMatcher" class="com.meng.chatonline.security.RetryLimitHashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="${password.algorithmName}"></property>
        <property name="hashIterations" value="${password.hashIterations}"></property>

        <property name="cacheManager" ref="shiroCacheManager"></property>
        <property name="cacheName" value="passwordRetryCache"></property>
        <!--最多重复错误登陆次数-->
        <property name="maxRetryCount" value="5"></property>
    </bean>

    <!-- 自定义form认证过滤器 -->
    <!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过滤器，表单中的用户账号、密码及loginurl将采用默认值，
        建议配置 -->
    <bean id="authenticationFilter" class="com.meng.chatonline.security.filter.MyFormAuthenticationFilter">
        <property name="usernameParam" value="account"></property>
        <property name="passwordParam" value="password"></property>
        <property name="rememberMeParam" value="rememberMe"></property>
        <property name="useSaveRequestToBeSuccessUrl" value="true"></property>
        <!--认证成功后跳转的页面，默认认证成功自动跳转到上一个请求路径-->
        <!--<property name="successUrl" value="/chatRoom"></property>-->
        <!--登陆验证地址，同shiroFilter配置的loginUrl值一样-->
        <!--<property name="loginUrl" value="/doLogin"></property>-->
    </bean>

    <!--自定义注销退出过滤器，用于用户注销时向其他用户广播注销消息-->
    <bean id="logoutFilter" class="com.meng.chatonline.security.filter.MyLogoutFilter"></bean>

    <!--缓存管理器-->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory"></property>
        <!--<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"></property>-->
    </bean>

    <!-- 用于生成会话ID，默认就是JavaUuidSessionIdGenerator，使用java.util.UUID生成。 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <!--设置Session缓存名字，默认就是shiro-activeSessionCache-->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"></property>
    </bean>

    <!-- 会话验证调度器 -->
    <!--<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">-->
        <!--<property name="sessionValidationInterval" value="1800000"/>-->
        <!--<property name="sessionManager" ref="shiroSessionManager"/>-->
    <!--</bean>-->
    <bean id="shiroSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"></property>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 相隔多久检查一次session的有效性 -->
        <property name="sessionValidationInterval" value="1800000"/>
        <!--<property name="sessionValidationScheduler" ref="sessionValidationScheduler"></property>-->
        <!-- session 默认有效时间为半小时 （毫秒单位）-->
        <property name="globalSessionTimeout" value="1200000"/>

        <!--配置自定义session监听器-->
        <property name ="sessionListeners">
            <list>
                <ref bean="sessionListener1"></ref>
            </list>
        </property>
    </bean>
    <!--自定义session监听器-->
    <bean id="sessionListener1" class="com.meng.chatonline.security.listener.MySessionListener"></bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager)
        设置了以后可以直接通过SecurityUtils.getSubject()得到Subject-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!--会话cookie-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--必须设置，否则会报异常root cause
        java.lang.IllegalStateException: Cookie name cannot be null/empty.-->
        <constructor-arg type="java.lang.String" value="sessionId"/>
        <property name="httpOnly" value="true"></property>
        <!--maxAge=-1表示浏览器关闭时失效此Cookie-->
        <property name="maxAge" value="-1"></property>
    </bean>

    <!--rememberMe cookie-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg type="java.lang.String" value="rememberMe"/>
        <property name="httpOnly" value="true"></property>
        <!--有效期为30天，单位为秒-->
        <property name="maxAge" value="2592000"></property>
    </bean>
    <!--rememberMe管理器-->
    <bean id="cookieRememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="rememberMeCookie"></property>
        <!--
        加密rememberMe Cookie的密钥；默认AES算法，
        rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）
        下面value使用了SpEL表达式
        不加上这个会报异常org.apache.shiro.crypto.CryptoException: Unable to execute 'doFinal' with cipher instance [javax.crypto.Cipher@4d9a1041].
        -->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
    </bean>

    <!--配置SSL过滤器-->
    <bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
        <!--SslFilter默认端口是443，此处使用了8443-->
        <property name="port" value="8443"></property>
    </bean>

    <!--配置自定义并发登录人数控制过滤器-->
    <bean id="kickoutSessionControlFilter" class="com.meng.chatonline.security.filter.KickoutSessionControlFilter">
        <property name="kickoutAfter" value="false"></property>
        <property name="sessionManager" ref="shiroSessionManager"></property>
        <property name="kickoutUrl" value="/login?kickout=1"></property>
        <property name="maxSession" value="1"></property>
        <property name="cacheManager" ref="shiroCacheManager"></property>
        <property name="cacheName" value="userSessionsCache"></property>
    </bean>

    <!--验证码过滤器-->
    <bean id="captchaValidationFilter" class="com.meng.chatonline.security.filter.CaptchaValidationFilter">
        <property name="captchaEnabled" value="true"></property>
        <property name="captchaParam" value="captcha"></property>
    </bean>

    <!--强制退出过滤器-->
    <bean id="forceLogoutFilter" class="com.meng.chatonline.security.filter.ForceLogoutFilter"></bean>
</beans>